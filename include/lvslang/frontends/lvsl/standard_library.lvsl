STD_FUNCTION func abs(x: char) -> char
STD_FUNCTION func abs(x: char2) -> char2
STD_FUNCTION func abs(x: char3) -> char3
STD_FUNCTION func abs(x: char4) -> char4
STD_FUNCTION func abs(x: short) -> short
STD_FUNCTION func abs(x: short2) -> short2
STD_FUNCTION func abs(x: short3) -> short3
STD_FUNCTION func abs(x: short4) -> short4
STD_FUNCTION func abs(x: int) -> int
STD_FUNCTION func abs(x: int2) -> int2
STD_FUNCTION func abs(x: int3) -> int3
STD_FUNCTION func abs(x: int4) -> int4
STD_FUNCTION func abs(x: half) -> half
STD_FUNCTION func abs(x: half2) -> half2
STD_FUNCTION func abs(x: half3) -> half3
STD_FUNCTION func abs(x: half4) -> half4
STD_FUNCTION func abs(x: float) -> float
STD_FUNCTION func abs(x: float2) -> float2
STD_FUNCTION func abs(x: float3) -> float3
STD_FUNCTION func abs(x: float4) -> float4

STD_FUNCTION func acos(x: float) -> float

STD_FUNCTION func acosh(x: float) -> float

STD_FUNCTION func asin(x: float) -> float

STD_FUNCTION func asinh(x: float) -> float

STD_FUNCTION func atan(x: float) -> float

STD_FUNCTION func atanh(x: float) -> float

STD_FUNCTION func ceil(x: half) -> half
STD_FUNCTION func ceil(x: half2) -> half2
STD_FUNCTION func ceil(x: half3) -> half3
STD_FUNCTION func ceil(x: half4) -> half4
STD_FUNCTION func ceil(x: float) -> float
STD_FUNCTION func ceil(x: float2) -> float2
STD_FUNCTION func ceil(x: float3) -> float3
STD_FUNCTION func ceil(x: float4) -> float4

STD_FUNCTION func clamp(x: char, minVal: char, maxVal: char) -> char
STD_FUNCTION func clamp(x: char2, minVal: char2, maxVal: char2) -> char2
STD_FUNCTION func clamp(x: char3, minVal: char3, maxVal: char3) -> char3
STD_FUNCTION func clamp(x: char4, minVal: char4, maxVal: char4) -> char4
STD_FUNCTION func clamp(x: short, minVal: short, maxVal: short) -> short
STD_FUNCTION func clamp(x: short2, minVal: short2, maxVal: short2) -> short2
STD_FUNCTION func clamp(x: short3, minVal: short3, maxVal: short3) -> short3
STD_FUNCTION func clamp(x: short4, minVal: short4, maxVal: short4) -> short4
STD_FUNCTION func clamp(x: int, minVal: int, maxVal: int) -> int
STD_FUNCTION func clamp(x: int2, minVal: int2, maxVal: int2) -> int2
STD_FUNCTION func clamp(x: int3, minVal: int3, maxVal: int3) -> int3
STD_FUNCTION func clamp(x: int4, minVal: int4, maxVal: int4) -> int4
STD_FUNCTION func clamp(x: half, minVal: half, maxVal: half) -> half
STD_FUNCTION func clamp(x: half2, minVal: half2, maxVal: half2) -> half2
STD_FUNCTION func clamp(x: half3, minVal: half3, maxVal: half3) -> half3
STD_FUNCTION func clamp(x: half4, minVal: half4, maxVal: half4) -> half4
STD_FUNCTION func clamp(x: float, minVal: float, maxVal: float) -> float
STD_FUNCTION func clamp(x: float2, minVal: float2, maxVal: float2) -> float2
STD_FUNCTION func clamp(x: float3, minVal: float3, maxVal: float3) -> float3
STD_FUNCTION func clamp(x: float4, minVal: float4, maxVal: float4) -> float4

STD_FUNCTION func cos(x: float) -> float

STD_FUNCTION func cosh(x: float) -> float

STD_FUNCTION func cross(x: half3, y: half3) -> half3
STD_FUNCTION func cross(x: float3, y: float3) -> float3

//TODO: add determinant function

STD_FUNCTION func distance(x: half2, y: half2) -> half
STD_FUNCTION func distance(x: half3, y: half3) -> half
STD_FUNCTION func distance(x: half4, y: half4) -> half
STD_FUNCTION func distance(x: float2, y: float2) -> float
STD_FUNCTION func distance(x: float3, y: float3) -> float
STD_FUNCTION func distance(x: float4, y: float4) -> float

STD_FUNCTION func dot(x: half2, y: half2) -> half
STD_FUNCTION func dot(x: half3, y: half3) -> half
STD_FUNCTION func dot(x: half4, y: half4) -> half
STD_FUNCTION func dot(x: float2, y: float2) -> float
STD_FUNCTION func dot(x: float3, y: float3) -> float
STD_FUNCTION func dot(x: float4, y: float4) -> float

STD_FUNCTION func exp(x: half) -> half
STD_FUNCTION func exp(x: half2) -> half2
STD_FUNCTION func exp(x: half3) -> half3
STD_FUNCTION func exp(x: half4) -> half4
STD_FUNCTION func exp(x: float) -> float
STD_FUNCTION func exp(x: float2) -> float2
STD_FUNCTION func exp(x: float3) -> float3
STD_FUNCTION func exp(x: float4) -> float4

STD_FUNCTION func exp2(x: half) -> half
STD_FUNCTION func exp2(x: half2) -> half2
STD_FUNCTION func exp2(x: half3) -> half3
STD_FUNCTION func exp2(x: half4) -> half4
STD_FUNCTION func exp2(x: float) -> float
STD_FUNCTION func exp2(x: float2) -> float2
STD_FUNCTION func exp2(x: float3) -> float3
STD_FUNCTION func exp2(x: float4) -> float4

STD_FUNCTION func floor(x: half) -> half
STD_FUNCTION func floor(x: half2) -> half2
STD_FUNCTION func floor(x: half3) -> half3
STD_FUNCTION func floor(x: half4) -> half4
STD_FUNCTION func floor(x: float) -> float
STD_FUNCTION func floor(x: float2) -> float2
STD_FUNCTION func floor(x: float3) -> float3
STD_FUNCTION func floor(x: float4) -> float4

STD_FUNCTION func fract(x: half) -> half
STD_FUNCTION func fract(x: half2) -> half2
STD_FUNCTION func fract(x: half3) -> half3
STD_FUNCTION func fract(x: half4) -> half4
STD_FUNCTION func fract(x: float) -> float
STD_FUNCTION func fract(x: float2) -> float2
STD_FUNCTION func fract(x: float3) -> float3
STD_FUNCTION func fract(x: float4) -> float4

//TODO: add image functions

STD_FUNCTION func isinf(x: half) -> bool
STD_FUNCTION func isinf(x: half2) -> bool2
STD_FUNCTION func isinf(x: half3) -> bool3
STD_FUNCTION func isinf(x: half4) -> bool4
STD_FUNCTION func isinf(x: float) -> bool
STD_FUNCTION func isinf(x: float2) -> bool2
STD_FUNCTION func isinf(x: float3) -> bool3
STD_FUNCTION func isinf(x: float4) -> bool4

STD_FUNCTION func isnan(x: half) -> bool
STD_FUNCTION func isnan(x: half2) -> bool2
STD_FUNCTION func isnan(x: half3) -> bool3
STD_FUNCTION func isnan(x: half4) -> bool4
STD_FUNCTION func isnan(x: float) -> bool
STD_FUNCTION func isnan(x: float2) -> bool2
STD_FUNCTION func isnan(x: float3) -> bool3
STD_FUNCTION func isnan(x: float4) -> bool4

STD_FUNCTION func length(x: half2) -> half
STD_FUNCTION func length(x: half3) -> half
STD_FUNCTION func length(x: half4) -> half
STD_FUNCTION func length(x: float2) -> float
STD_FUNCTION func length(x: float3) -> float
STD_FUNCTION func length(x: float4) -> float

STD_FUNCTION func log(x: half) -> half
STD_FUNCTION func log(x: half2) -> half2
STD_FUNCTION func log(x: half3) -> half3
STD_FUNCTION func log(x: half4) -> half4
STD_FUNCTION func log(x: float) -> float
STD_FUNCTION func log(x: float2) -> float2
STD_FUNCTION func log(x: float3) -> float3
STD_FUNCTION func log(x: float4) -> float4

STD_FUNCTION func log2(x: half) -> half
STD_FUNCTION func log2(x: half2) -> half2
STD_FUNCTION func log2(x: half3) -> half3
STD_FUNCTION func log2(x: half4) -> half4
STD_FUNCTION func log2(x: float) -> float
STD_FUNCTION func log2(x: float2) -> float2
STD_FUNCTION func log2(x: float3) -> float3
STD_FUNCTION func log2(x: float4) -> float4

STD_FUNCTION func max(x: char, y: char) -> char
STD_FUNCTION func max(x: char2, y: char2) -> char2
STD_FUNCTION func max(x: char3, y: char3) -> char3
STD_FUNCTION func max(x: char4, y: char4) -> char4
STD_FUNCTION func max(x: short, y: short) -> short
STD_FUNCTION func max(x: short2, y: short2) -> short2
STD_FUNCTION func max(x: short3, y: short3) -> short3
STD_FUNCTION func max(x: short4, y: short4) -> short4
STD_FUNCTION func max(x: int, y: int) -> int
STD_FUNCTION func max(x: int2, y: int2) -> int2
STD_FUNCTION func max(x: int3, y: int3) -> int3
STD_FUNCTION func max(x: int4, y: int4) -> int4
STD_FUNCTION func max(x: half, y: half) -> half
STD_FUNCTION func max(x: half2, y: half2) -> half2
STD_FUNCTION func max(x: half3, y: half3) -> half3
STD_FUNCTION func max(x: half4, y: half4) -> half4
STD_FUNCTION func max(x: float, y: float) -> float
STD_FUNCTION func max(x: float2, y: float2) -> float2
STD_FUNCTION func max(x: float3, y: float3) -> float3
STD_FUNCTION func max(x: float4, y: float4) -> float4

STD_FUNCTION func min(x: char, y: char) -> char
STD_FUNCTION func min(x: char2, y: char2) -> char2
STD_FUNCTION func min(x: char3, y: char3) -> char3
STD_FUNCTION func min(x: char4, y: char4) -> char4
STD_FUNCTION func min(x: short, y: short) -> short
STD_FUNCTION func min(x: short2, y: short2) -> short2
STD_FUNCTION func min(x: short3, y: short3) -> short3
STD_FUNCTION func min(x: short4, y: short4) -> short4
STD_FUNCTION func min(x: int, y: int) -> int
STD_FUNCTION func min(x: int2, y: int2) -> int2
STD_FUNCTION func min(x: int3, y: int3) -> int3
STD_FUNCTION func min(x: int4, y: int4) -> int4
STD_FUNCTION func min(x: half, y: half) -> half
STD_FUNCTION func min(x: half2, y: half2) -> half2
STD_FUNCTION func min(x: half3, y: half3) -> half3
STD_FUNCTION func min(x: half4, y: half4) -> half4
STD_FUNCTION func min(x: float, y: float) -> float
STD_FUNCTION func min(x: float2, y: float2) -> float2
STD_FUNCTION func min(x: float3, y: float3) -> float3
STD_FUNCTION func min(x: float4, y: float4) -> float4

STD_FUNCTION func mix(x: half, y: half, a: half) -> half
STD_FUNCTION func mix(x: half2, y: half2, a: half2) -> half2
STD_FUNCTION func mix(x: half3, y: half3, a: half3) -> half3
STD_FUNCTION func mix(x: half4, y: half4, a: half4) -> half4
STD_FUNCTION func mix(x: float, y: float, a: float) -> float
STD_FUNCTION func mix(x: float2, y: float2, a: float2) -> float2
STD_FUNCTION func mix(x: float3, y: float3, a: float3) -> float3
STD_FUNCTION func mix(x: float4, y: float4, a: float4) -> float4

STD_FUNCTION func normalize(x: half2) -> half2
STD_FUNCTION func normalize(x: half3) -> half3
STD_FUNCTION func normalize(x: half4) -> half4
STD_FUNCTION func normalize(x: float2) -> float2
STD_FUNCTION func normalize(x: float3) -> float3
STD_FUNCTION func normalize(x: float4) -> float4

STD_FUNCTION func pow(x: half, y: half) -> half
STD_FUNCTION func pow(x: half2, y: half2) -> half2
STD_FUNCTION func pow(x: half3, y: half3) -> half3
STD_FUNCTION func pow(x: half4, y: half4) -> half4
STD_FUNCTION func pow(x: float, y: float) -> float
STD_FUNCTION func pow(x: float2, y: float2) -> float2
STD_FUNCTION func pow(x: float3, y: float3) -> float3
STD_FUNCTION func pow(x: float4, y: float4) -> float4

STD_FUNCTION func reflect(I: half2, N: half2) -> half2
STD_FUNCTION func reflect(I: half3, N: half3) -> half3
STD_FUNCTION func reflect(I: half4, N: half4) -> half4
STD_FUNCTION func reflect(I: float2, N: float2) -> float2
STD_FUNCTION func reflect(I: float3, N: float3) -> float3
STD_FUNCTION func reflect(I: float4, N: float4) -> float4

STD_FUNCTION func refract(I: half2, N: half2, eta: half) -> half2
STD_FUNCTION func refract(I: half3, N: half3, eta: half) -> half3
STD_FUNCTION func refract(I: half4, N: half4, eta: half) -> half4
STD_FUNCTION func refract(I: float2, N: float2, eta: float) -> float2
STD_FUNCTION func refract(I: float3, N: float3, eta: float) -> float3
STD_FUNCTION func refract(I: float4, N: float4, eta: float) -> float4

STD_FUNCTION func round(x: half) -> half
STD_FUNCTION func round(x: half2) -> half2
STD_FUNCTION func round(x: half3) -> half3
STD_FUNCTION func round(x: half4) -> half4
STD_FUNCTION func round(x: float) -> float
STD_FUNCTION func round(x: float2) -> float2
STD_FUNCTION func round(x: float3) -> float3
STD_FUNCTION func round(x: float4) -> float4

//TODO: add overloads
STD_FUNCTION func sample(texture: texture2D<float>, samplr: sampler, coord: float2) -> float4

//TODO: check if integers are supported
STD_FUNCTION func sign(x: char) -> char
STD_FUNCTION func sign(x: char2) -> char2
STD_FUNCTION func sign(x: char3) -> char3
STD_FUNCTION func sign(x: char4) -> char4
STD_FUNCTION func sign(x: short) -> short
STD_FUNCTION func sign(x: short2) -> short2
STD_FUNCTION func sign(x: short3) -> short3
STD_FUNCTION func sign(x: short4) -> short4
STD_FUNCTION func sign(x: int) -> int
STD_FUNCTION func sign(x: int2) -> int2
STD_FUNCTION func sign(x: int3) -> int3
STD_FUNCTION func sign(x: int4) -> int4
STD_FUNCTION func sign(x: half) -> half
STD_FUNCTION func sign(x: half2) -> half2
STD_FUNCTION func sign(x: half3) -> half3
STD_FUNCTION func sign(x: half4) -> half4
STD_FUNCTION func sign(x: float) -> float
STD_FUNCTION func sign(x: float2) -> float2
STD_FUNCTION func sign(x: float3) -> float3
STD_FUNCTION func sign(x: float4) -> float4

STD_FUNCTION func sin(x: float) -> float

STD_FUNCTION func sinh(x: float) -> float

STD_FUNCTION func smoothstep(edge0: half, edge1: half, x: half) -> half
STD_FUNCTION func smoothstep(edge0: half2, edge1: half2, x: half2) -> half2
STD_FUNCTION func smoothstep(edge0: half3, edge1: half3, x: half3) -> half3
STD_FUNCTION func smoothstep(edge0: half4, edge1: half4, x: half4) -> half4
STD_FUNCTION func smoothstep(edge0: float, edge1: float, x: float) -> float
STD_FUNCTION func smoothstep(edge0: float2, edge1: float2, x: float2) -> float2
STD_FUNCTION func smoothstep(edge0: float3, edge1: float3, x: float3) -> float3
STD_FUNCTION func smoothstep(edge0: float4, edge1: float4, x: float4) -> float4

STD_FUNCTION func sqrt(x: half) -> half
STD_FUNCTION func sqrt(x: half2) -> half2
STD_FUNCTION func sqrt(x: half3) -> half3
STD_FUNCTION func sqrt(x: half4) -> half4
STD_FUNCTION func sqrt(x: float) -> float
STD_FUNCTION func sqrt(x: float2) -> float2
STD_FUNCTION func sqrt(x: float3) -> float3
STD_FUNCTION func sqrt(x: float4) -> float4

STD_FUNCTION func step(edge: half, x: half) -> half
STD_FUNCTION func step(edge: half2, x: half2) -> half2
STD_FUNCTION func step(edge: half3, x: half3) -> half3
STD_FUNCTION func step(edge: half4, x: half4) -> half4
STD_FUNCTION func step(edge: float, x: float) -> float
STD_FUNCTION func step(edge: float2, x: float2) -> float2
STD_FUNCTION func step(edge: float3, x: float3) -> float3
STD_FUNCTION func step(edge: float4, x: float4) -> float4

STD_FUNCTION func tan(x: float) -> float

STD_FUNCTION func tanh(x: float) -> float

//TODO: add transpose function
