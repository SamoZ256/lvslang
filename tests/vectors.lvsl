struct FragmentOut {
    member outColor: float4 [[color(0)]]
}

fragment testVectors() -> struct FragmentOut {
    var fragmentOut: struct FragmentOut
    fragmentOut.outColor = float4(0.0, 0.0, 0.0, 1.0)

    // Initialization
    var vec1 = float4(1.0, 2.0, 3.0, 4.0)
    var vec2 = float4(5.0, 6.0, 7.0, 8.0)

    // Addition
    var sum = vec1 + vec2
    if (sum == float4(6.0, 8.0, 10.0, 12.0))
        fragmentOut.outColor.r = 1.0

    // Subtraction
    var diff = vec2 - vec1;
    if (diff == float4(4.0, 4.0, 4.0, 4.0))
        fragmentOut.outColor.g = 1.0

    // Scalar multiplication
    var scaled = vec1 * 2.0;
    if (scaled == float4(2.0, 4.0, 6.0, 8.0))
        fragmentOut.outColor.b = 1.0

    // Swizzling
    var swizzled = vec1.yxwz
    vec1.xz = vec2.yw

    return fragmentOut
}
