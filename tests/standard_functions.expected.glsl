#version 450

#extension GL_EXT_shader_8bit_storage : enable

#extension GL_EXT_shader_16bit_storage : enable

#extension GL_EXT_shader_explicit_arithmetic_types : enable

struct FragmentOut {
	vec4 outColor;
};

FragmentOut testStandardFunctions(texture2D testTexture, sampler testSampler);

layout (set = 0, binding = 0) uniform texture2D testTexture;

layout (set = 0, binding = 0) uniform sampler testSampler;

layout (location = 0) out vec4 outColor;

void main() {
	//Input

	//Entry point call
	FragmentOut _entryPointOutput = testStandardFunctions(testTexture, testSampler);

	//Output
	outColor = _entryPointOutput.outColor;
}

FragmentOut testStandardFunctions(texture2D testTexture, sampler testSampler) {
	int absTestChar = abs(int(0));
	i8vec2 absTestChar2 = abs(i8vec2(0));
	i8vec3 absTestChar3 = abs(i8vec3(0));
	i8vec4 absTestChar4 = abs(i8vec4(0));
	int absTestShort = abs(int(0));
	i16vec2 absTestShort2 = abs(i16vec2(0));
	i16vec3 absTestShort3 = abs(i16vec3(0));
	i16vec4 absTestShort4 = abs(i16vec4(0));
	int absTestInt = abs(int(0));
	ivec2 absTestInt2 = abs(ivec2(0));
	ivec3 absTestInt3 = abs(ivec3(0));
	ivec4 absTestInt4 = abs(ivec4(0));
	float16_t absTestHalf = abs(float16_t(0.000000));
	f16vec2 absTestHalf2 = abs(f16vec2(0.000000));
	f16vec3 absTestHalf3 = abs(f16vec3(0.000000));
	f16vec4 absTestHalf4 = abs(f16vec4(0.000000));
	float absTestFloat = abs(float(0.000000));
	vec2 absTestFloat2 = abs(vec2(0.000000));
	vec3 absTestFloat3 = abs(vec3(0.000000));
	vec4 absTestFloat4 = abs(vec4(0.000000));
	float acosTest = acos(0.000000);
	float acoshTest = acosh(0.000000);
	float asinTest = asin(0.000000);
	float asinhTest = asinh(0.000000);
	float atanTest = atan(0.000000);
	float atanhTest = atanh(0.000000);
	float16_t ceilTestHalf = ceil(float16_t(0.000000));
	f16vec2 ceilTestHalf2 = ceil(f16vec2(0.000000));
	f16vec3 ceilTestHalf3 = ceil(f16vec3(0.000000));
	f16vec4 ceilTestHalf4 = ceil(f16vec4(0.000000));
	float ceilTestFloat = ceil(float(0.000000));
	vec2 ceilTestFloat2 = ceil(vec2(0.000000));
	vec3 ceilTestFloat3 = ceil(vec3(0.000000));
	vec4 ceilTestFloat4 = ceil(vec4(0.000000));
	int clampTestChar = clamp(int(0), int(0), int(0));
	i8vec2 clampTestChar2 = clamp(i8vec2(0), i8vec2(0), i8vec2(0));
	i8vec3 clampTestChar3 = clamp(i8vec3(0), i8vec3(0), i8vec3(0));
	i8vec4 clampTestChar4 = clamp(i8vec4(0), i8vec4(0), i8vec4(0));
	int clampTestShort = clamp(int(0), int(0), int(0));
	i16vec2 clampTestShort2 = clamp(i16vec2(0), i16vec2(0), i16vec2(0));
	i16vec3 clampTestShort3 = clamp(i16vec3(0), i16vec3(0), i16vec3(0));
	i16vec4 clampTestShort4 = clamp(i16vec4(0), i16vec4(0), i16vec4(0));
	int clampTestInt = clamp(int(0), int(0), int(0));
	ivec2 clampTestInt2 = clamp(ivec2(0), ivec2(0), ivec2(0));
	ivec3 clampTestInt3 = clamp(ivec3(0), ivec3(0), ivec3(0));
	ivec4 clampTestInt4 = clamp(ivec4(0), ivec4(0), ivec4(0));
	float16_t clampTestHalf = clamp(float16_t(0.000000), float16_t(0.000000), float16_t(0.000000));
	f16vec2 clampTestHalf2 = clamp(f16vec2(0.000000), f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 clampTestHalf3 = clamp(f16vec3(0.000000), f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 clampTestHalf4 = clamp(f16vec4(0.000000), f16vec4(0.000000), f16vec4(0.000000));
	float clampTestFloat = clamp(float(0.000000), float(0.000000), float(0.000000));
	vec2 clampTestFloat2 = clamp(vec2(0.000000), vec2(0.000000), vec2(0.000000));
	vec3 clampTestFloat3 = clamp(vec3(0.000000), vec3(0.000000), vec3(0.000000));
	vec4 clampTestFloat4 = clamp(vec4(0.000000), vec4(0.000000), vec4(0.000000));
	float cosTest = cos(0.000000);
	float coshTest = cosh(0.000000);
	f16vec3 crossTestHalf3 = cross(f16vec3(0.000000), f16vec3(0.000000));
	vec3 crossTestFloat3 = cross(vec3(0.000000), vec3(0.000000));
	float16_t distanceTestHalf2 = distance(f16vec2(0.000000), f16vec2(0.000000));
	float16_t distanceTestHalf3 = distance(f16vec3(0.000000), f16vec3(0.000000));
	float16_t distanceTestHalf4 = distance(f16vec4(0.000000), f16vec4(0.000000));
	float distanceTestFloat2 = distance(vec2(0.000000), vec2(0.000000));
	float distanceTestFloat3 = distance(vec3(0.000000), vec3(0.000000));
	float distanceTestFloat4 = distance(vec4(0.000000), vec4(0.000000));
	float16_t dotTestHalf2 = dot(f16vec2(0.000000), f16vec2(0.000000));
	float16_t dotTestHalf3 = dot(f16vec3(0.000000), f16vec3(0.000000));
	float16_t dotTestHalf4 = dot(f16vec4(0.000000), f16vec4(0.000000));
	float dotTestFloat2 = dot(vec2(0.000000), vec2(0.000000));
	float dotTestFloat3 = dot(vec3(0.000000), vec3(0.000000));
	float dotTestFloat4 = dot(vec4(0.000000), vec4(0.000000));
	float16_t expTestHalf = exp(float16_t(0.000000));
	f16vec2 expTestHalf2 = exp(f16vec2(0.000000));
	f16vec3 expTestHalf3 = exp(f16vec3(0.000000));
	f16vec4 expTestHalf4 = exp(f16vec4(0.000000));
	float expTestFloat = exp(float(0.000000));
	vec2 expTestFloat2 = exp(vec2(0.000000));
	vec3 expTestFloat3 = exp(vec3(0.000000));
	vec4 expTestFloat4 = exp(vec4(0.000000));
	float16_t exp2TestHalf = exp2(float16_t(0.000000));
	f16vec2 exp2TestHalf2 = exp2(f16vec2(0.000000));
	f16vec3 exp2TestHalf3 = exp2(f16vec3(0.000000));
	f16vec4 exp2TestHalf4 = exp2(f16vec4(0.000000));
	float exp2TestFloat = exp2(float(0.000000));
	vec2 exp2TestFloat2 = exp2(vec2(0.000000));
	vec3 exp2TestFloat3 = exp2(vec3(0.000000));
	vec4 exp2TestFloat4 = exp2(vec4(0.000000));
	float16_t floorTestHalf = floor(float16_t(0.000000));
	f16vec2 floorTestHalf2 = floor(f16vec2(0.000000));
	f16vec3 floorTestHalf3 = floor(f16vec3(0.000000));
	f16vec4 floorTestHalf4 = floor(f16vec4(0.000000));
	float floorTestFloat = floor(float(0.000000));
	vec2 floorTestFloat2 = floor(vec2(0.000000));
	vec3 floorTestFloat3 = floor(vec3(0.000000));
	vec4 floorTestFloat4 = floor(vec4(0.000000));
	float16_t fractTestHalf = fract(float16_t(0.000000));
	f16vec2 fractTestHalf2 = fract(f16vec2(0.000000));
	f16vec3 fractTestHalf3 = fract(f16vec3(0.000000));
	f16vec4 fractTestHalf4 = fract(f16vec4(0.000000));
	float fractTestFloat = fract(float(0.000000));
	vec2 fractTestFloat2 = fract(vec2(0.000000));
	vec3 fractTestFloat3 = fract(vec3(0.000000));
	vec4 fractTestFloat4 = fract(vec4(0.000000));
	bool isinfTestHalf = isinf(float16_t(0.000000));
	vec2 isinfTestHalf2 = isinf(f16vec2(0.000000));
	vec3 isinfTestHalf3 = isinf(f16vec3(0.000000));
	vec4 isinfTestHalf4 = isinf(f16vec4(0.000000));
	bool isinfTestFloat = isinf(float(0.000000));
	vec2 isinfTestFloat2 = isinf(vec2(0.000000));
	vec3 isinfTestFloat3 = isinf(vec3(0.000000));
	vec4 isinfTestFloat4 = isinf(vec4(0.000000));
	bool isnanTestHalf = isnan(float16_t(0.000000));
	vec2 isnanTestHalf2 = isnan(f16vec2(0.000000));
	vec3 isnanTestHalf3 = isnan(f16vec3(0.000000));
	vec4 isnanTestHalf4 = isnan(f16vec4(0.000000));
	bool isnanTestFloat = isnan(float(0.000000));
	vec2 isnanTestFloat2 = isnan(vec2(0.000000));
	vec3 isnanTestFloat3 = isnan(vec3(0.000000));
	vec4 isnanTestFloat4 = isnan(vec4(0.000000));
	float16_t lengthTestHalf2 = length(f16vec2(0.000000));
	float16_t lengthTestHalf3 = length(f16vec3(0.000000));
	float16_t lengthTestHalf4 = length(f16vec4(0.000000));
	float lengthTestFloat2 = length(vec2(0.000000));
	float lengthTestFloat3 = length(vec3(0.000000));
	float lengthTestFloat4 = length(vec4(0.000000));
	float16_t logTestHalf = log(float16_t(0.000000));
	f16vec2 logTestHalf2 = log(f16vec2(0.000000));
	f16vec3 logTestHalf3 = log(f16vec3(0.000000));
	f16vec4 logTestHalf4 = log(f16vec4(0.000000));
	float logTestFloat = log(float(0.000000));
	vec2 logTestFloat2 = log(vec2(0.000000));
	vec3 logTestFloat3 = log(vec3(0.000000));
	vec4 logTestFloat4 = log(vec4(0.000000));
	float16_t log2TestHalf = log2(float16_t(0.000000));
	f16vec2 log2TestHalf2 = log2(f16vec2(0.000000));
	f16vec3 log2TestHalf3 = log2(f16vec3(0.000000));
	f16vec4 log2TestHalf4 = log2(f16vec4(0.000000));
	float log2TestFloat = log2(float(0.000000));
	vec2 log2TestFloat2 = log2(vec2(0.000000));
	vec3 log2TestFloat3 = log2(vec3(0.000000));
	vec4 log2TestFloat4 = log2(vec4(0.000000));
	int maxTestChar = max(int(0), int(0));
	i8vec2 maxTestChar2 = max(i8vec2(0), i8vec2(0));
	i8vec3 maxTestChar3 = max(i8vec3(0), i8vec3(0));
	i8vec4 maxTestChar4 = max(i8vec4(0), i8vec4(0));
	int maxTestShort = max(int(0), int(0));
	i16vec2 maxTestShort2 = max(i16vec2(0), i16vec2(0));
	i16vec3 maxTestShort3 = max(i16vec3(0), i16vec3(0));
	i16vec4 maxTestShort4 = max(i16vec4(0), i16vec4(0));
	int maxTestInt = max(int(0), int(0));
	ivec2 maxTestInt2 = max(ivec2(0), ivec2(0));
	ivec3 maxTestInt3 = max(ivec3(0), ivec3(0));
	ivec4 maxTestInt4 = max(ivec4(0), ivec4(0));
	float16_t maxTestHalf = max(float16_t(0.000000), float16_t(0.000000));
	f16vec2 maxTestHalf2 = max(f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 maxTestHalf3 = max(f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 maxTestHalf4 = max(f16vec4(0.000000), f16vec4(0.000000));
	float maxTestFloat = max(float(0.000000), float(0.000000));
	vec2 maxTestFloat2 = max(vec2(0.000000), vec2(0.000000));
	vec3 maxTestFloat3 = max(vec3(0.000000), vec3(0.000000));
	vec4 maxTestFloat4 = max(vec4(0.000000), vec4(0.000000));
	int minTestChar = min(int(0), int(0));
	i8vec2 minTestChar2 = min(i8vec2(0), i8vec2(0));
	i8vec3 minTestChar3 = min(i8vec3(0), i8vec3(0));
	i8vec4 minTestChar4 = min(i8vec4(0), i8vec4(0));
	int minTestShort = min(int(0), int(0));
	i16vec2 minTestShort2 = min(i16vec2(0), i16vec2(0));
	i16vec3 minTestShort3 = min(i16vec3(0), i16vec3(0));
	i16vec4 minTestShort4 = min(i16vec4(0), i16vec4(0));
	int minTestInt = min(int(0), int(0));
	ivec2 minTestInt2 = min(ivec2(0), ivec2(0));
	ivec3 minTestInt3 = min(ivec3(0), ivec3(0));
	ivec4 minTestInt4 = min(ivec4(0), ivec4(0));
	float16_t minTestHalf = min(float16_t(0.000000), float16_t(0.000000));
	f16vec2 minTestHalf2 = min(f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 minTestHalf3 = min(f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 minTestHalf4 = min(f16vec4(0.000000), f16vec4(0.000000));
	float minTestFloat = min(float(0.000000), float(0.000000));
	vec2 minTestFloat2 = min(vec2(0.000000), vec2(0.000000));
	vec3 minTestFloat3 = min(vec3(0.000000), vec3(0.000000));
	vec4 minTestFloat4 = min(vec4(0.000000), vec4(0.000000));
	float16_t mixTestHalf = mix(float16_t(0.000000), float16_t(0.000000), float16_t(0.000000));
	f16vec2 mixTestHalf2 = mix(f16vec2(0.000000), f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 mixTestHalf3 = mix(f16vec3(0.000000), f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 mixTestHalf4 = mix(f16vec4(0.000000), f16vec4(0.000000), f16vec4(0.000000));
	float mixTestFloat = mix(float(0.000000), float(0.000000), float(0.000000));
	vec2 mixTestFloat2 = mix(vec2(0.000000), vec2(0.000000), vec2(0.000000));
	vec3 mixTestFloat3 = mix(vec3(0.000000), vec3(0.000000), vec3(0.000000));
	vec4 mixTestFloat4 = mix(vec4(0.000000), vec4(0.000000), vec4(0.000000));
	f16vec2 normalizeTestHalf2 = normalize(f16vec2(0.000000));
	f16vec3 normalizeTestHalf3 = normalize(f16vec3(0.000000));
	f16vec4 normalizeTestHalf4 = normalize(f16vec4(0.000000));
	vec2 normalizeTestFloat2 = normalize(vec2(0.000000));
	vec3 normalizeTestFloat3 = normalize(vec3(0.000000));
	vec4 normalizeTestFloat4 = normalize(vec4(0.000000));
	float16_t powTestHalf = pow(float16_t(0.000000), float16_t(0.000000));
	f16vec2 powTestHalf2 = pow(f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 powTestHalf3 = pow(f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 powTestHalf4 = pow(f16vec4(0.000000), f16vec4(0.000000));
	float powTestFloat = pow(float(0.000000), float(0.000000));
	vec2 powTestFloat2 = pow(vec2(0.000000), vec2(0.000000));
	vec3 powTestFloat3 = pow(vec3(0.000000), vec3(0.000000));
	vec4 powTestFloat4 = pow(vec4(0.000000), vec4(0.000000));
	f16vec2 reflectTestHalf2 = reflect(f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 reflectTestHalf3 = reflect(f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 reflectTestHalf4 = reflect(f16vec4(0.000000), f16vec4(0.000000));
	vec2 reflectTestFloat2 = reflect(vec2(0.000000), vec2(0.000000));
	vec3 reflectTestFloat3 = reflect(vec3(0.000000), vec3(0.000000));
	vec4 reflectTestFloat4 = reflect(vec4(0.000000), vec4(0.000000));
	f16vec2 refractTestHalf2 = refract(f16vec2(0.000000), f16vec2(0.000000), float16_t(0.000000));
	f16vec3 refractTestHalf3 = refract(f16vec3(0.000000), f16vec3(0.000000), float16_t(0.000000));
	f16vec4 refractTestHalf4 = refract(f16vec4(0.000000), f16vec4(0.000000), float16_t(0.000000));
	vec2 refractTestFloat2 = refract(vec2(0.000000), vec2(0.000000), float(0.000000));
	vec3 refractTestFloat3 = refract(vec3(0.000000), vec3(0.000000), float(0.000000));
	vec4 refractTestFloat4 = refract(vec4(0.000000), vec4(0.000000), float(0.000000));
	float16_t roundTestHalf = round(float16_t(0.000000));
	f16vec2 roundTestHalf2 = round(f16vec2(0.000000));
	f16vec3 roundTestHalf3 = round(f16vec3(0.000000));
	f16vec4 roundTestHalf4 = round(f16vec4(0.000000));
	float roundTestFloat = round(float(0.000000));
	vec2 roundTestFloat2 = round(vec2(0.000000));
	vec3 roundTestFloat3 = round(vec3(0.000000));
	vec4 roundTestFloat4 = round(vec4(0.000000));
	vec4 sampleTest = texture(sampler2D(testTexture, testSampler), vec2(0.000000));
	int signTestChar = sign(int(0));
	i8vec2 signTestChar2 = sign(i8vec2(0));
	i8vec3 signTestChar3 = sign(i8vec3(0));
	i8vec4 signTestChar4 = sign(i8vec4(0));
	int signTestShort = sign(int(0));
	i16vec2 signTestShort2 = sign(i16vec2(0));
	i16vec3 signTestShort3 = sign(i16vec3(0));
	i16vec4 signTestShort4 = sign(i16vec4(0));
	int signTestInt = sign(int(0));
	ivec2 signTestInt2 = sign(ivec2(0));
	ivec3 signTestInt3 = sign(ivec3(0));
	ivec4 signTestInt4 = sign(ivec4(0));
	float16_t signTestHalf = sign(float16_t(0.000000));
	f16vec2 signTestHalf2 = sign(f16vec2(0.000000));
	f16vec3 signTestHalf3 = sign(f16vec3(0.000000));
	f16vec4 signTestHalf4 = sign(f16vec4(0.000000));
	float signTestFloat = sign(float(0.000000));
	vec2 signTestFloat2 = sign(vec2(0.000000));
	vec3 signTestFloat3 = sign(vec3(0.000000));
	vec4 signTestFloat4 = sign(vec4(0.000000));
	float sinTest = sin(0.000000);
	float sinhTest = sinh(0.000000);
	float16_t smoothstepTestHalf = smoothstep(float16_t(0.000000), float16_t(0.000000), float16_t(0.000000));
	f16vec2 smoothstepTestHalf2 = smoothstep(f16vec2(0.000000), f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 smoothstepTestHalf3 = smoothstep(f16vec3(0.000000), f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 smoothstepTestHalf4 = smoothstep(f16vec4(0.000000), f16vec4(0.000000), f16vec4(0.000000));
	float smoothstepTestFloat = smoothstep(float(0.000000), float(0.000000), float(0.000000));
	vec2 smoothstepTestFloat2 = smoothstep(vec2(0.000000), vec2(0.000000), vec2(0.000000));
	vec3 smoothstepTestFloat3 = smoothstep(vec3(0.000000), vec3(0.000000), vec3(0.000000));
	vec4 smoothstepTestFloat4 = smoothstep(vec4(0.000000), vec4(0.000000), vec4(0.000000));
	float16_t sqrtTestHalf = sqrt(float16_t(0.000000));
	f16vec2 sqrtTestHalf2 = sqrt(f16vec2(0.000000));
	f16vec3 sqrtTestHalf3 = sqrt(f16vec3(0.000000));
	f16vec4 sqrtTestHalf4 = sqrt(f16vec4(0.000000));
	float sqrtTestFloat = sqrt(float(0.000000));
	vec2 sqrtTestFloat2 = sqrt(vec2(0.000000));
	vec3 sqrtTestFloat3 = sqrt(vec3(0.000000));
	vec4 sqrtTestFloat4 = sqrt(vec4(0.000000));
	float16_t stepTestHalf = step(float16_t(0.000000), float16_t(0.000000));
	f16vec2 stepTestHalf2 = step(f16vec2(0.000000), f16vec2(0.000000));
	f16vec3 stepTestHalf3 = step(f16vec3(0.000000), f16vec3(0.000000));
	f16vec4 stepTestHalf4 = step(f16vec4(0.000000), f16vec4(0.000000));
	float stepTestFloat = step(float(0.000000), float(0.000000));
	vec2 stepTestFloat2 = step(vec2(0.000000), vec2(0.000000));
	vec3 stepTestFloat3 = step(vec3(0.000000), vec3(0.000000));
	vec4 stepTestFloat4 = step(vec4(0.000000), vec4(0.000000));
	float tanTest = tan(0.000000);
	float tanhTest = tanh(0.000000);
	FragmentOut fragmentOut;
	fragmentOut.outColor = vec4(0.000000, 0.000000, 0.000000, 1.000000);
	return fragmentOut;
}

